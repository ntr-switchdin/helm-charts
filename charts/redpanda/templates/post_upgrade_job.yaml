{{- /* Generated from "post_upgrade_job.go" */ -}}

{{- define "redpanda.PostUpgrade" -}}
{{- $dot := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- $values := $dot.Values.AsMap -}}
{{- if (not $values.post_upgrade_job.enabled) -}}
{{- (dict "r" (coalesce nil)) | toJson -}}
{{- break -}}
{{- end -}}
{{- $labels := (default (dict ) $values.post_upgrade_job.labels) -}}
{{- $annotations := (default (dict ) $values.post_upgrade_job.annotations) -}}
{{- $labels = (merge (dict ) (get (fromJson (include "redpanda.FullLabels" (dict "a" (list $dot) ))) "r") $labels) -}}
{{- $annotations = (merge (dict ) (dict "helm.sh/hook" "post-upgrade" "helm.sh/hook-delete-policy" "before-hook-creation" "helm.sh/hook-weight" "-10" ) $labels) -}}
{{- $securityContext := (merge (dict ) (get (fromJson (include "redpanda.ContainerSecurityContext" (dict "a" (list $dot) ))) "r") (get (fromJson (include "_shims.ptr_Deref" (dict "a" (list $values.post_upgrade_job.securityContext (mustMergeOverwrite (dict ) (dict ))) ))) "r")) -}}
{{- (dict "r" (mustMergeOverwrite (mustMergeOverwrite (dict ) (dict "metadata" (dict "creationTimestamp" (coalesce nil) ) "spec" (dict "template" (dict "metadata" (dict "creationTimestamp" (coalesce nil) ) "spec" (dict "containers" (coalesce nil) ) ) ) "status" (dict ) )) (mustMergeOverwrite (dict ) (dict "apiVersion" "batch/v1" "kind" "Job" )) (dict "metadata" (mustMergeOverwrite (dict "creationTimestamp" (coalesce nil) ) (dict "name" (printf "%s-post-upgrade" (get (fromJson (include "redpanda.Name" (dict "a" (list $dot) ))) "r")) "namespace" $dot.Release.Namespace "labels" $labels "annotations" $annotations )) "spec" (mustMergeOverwrite (dict "template" (dict "metadata" (dict "creationTimestamp" (coalesce nil) ) "spec" (dict "containers" (coalesce nil) ) ) ) (dict "backoffLimit" $values.post_upgrade_job.backoffLimit "template" (mustMergeOverwrite (dict "metadata" (dict "creationTimestamp" (coalesce nil) ) "spec" (dict "containers" (coalesce nil) ) ) (dict "metadata" (mustMergeOverwrite (dict "creationTimestamp" (coalesce nil) ) (dict "name" $dot.Release.Name "labels" (merge (dict ) (dict "app.kubernetes.io/name" (get (fromJson (include "redpanda.Name" (dict "a" (list $dot) ))) "r") "app.kubernetes.io/instance" $dot.Release.Name "app.kubernetes.io/component" (printf "%s-post-upgrade" (trunc 50 (get (fromJson (include "redpanda.Name" (dict "a" (list $dot) ))) "r"))) ) $values.commonLabels) )) "spec" (mustMergeOverwrite (dict "containers" (coalesce nil) ) (dict "nodeSelector" $values.nodeSelector "tolerations" $values.tolerations "restartPolicy" "Never" "securityContext" (get (fromJson (include "redpanda.PodSecurityContext" (dict "a" (list $dot) ))) "r") "serviceAccountName" (get (fromJson (include "redpanda.ServiceAccountName" (dict "a" (list $dot) ))) "r") "imagePullSecrets" $values.imagePullSecrets "containers" (list (mustMergeOverwrite (dict "name" "" "resources" (dict ) ) (dict "name" (printf "%s-post-upgrade" (get (fromJson (include "redpanda.Name" (dict "a" (list $dot) ))) "r")) "image" (printf "%s:%s" $values.image.repository (get (fromJson (include "redpanda.Tag" (dict "a" (list $dot) ))) "r")) "command" (list "/bin/bash" "-c") "args" (list (get (fromJson (include "redpanda.PostUpgradeJobScript" (dict "a" (list $dot) ))) "r")) "env" $values.post_upgrade_job.extraEnv "envFrom" $values.post_upgrade_job.extraEnvFrom "securityContext" $securityContext "resources" $values.post_upgrade_job.resources "volumeMounts" (get (fromJson (include "redpanda.DefaultMounts" (dict "a" (list $dot) ))) "r") ))) "volumes" (get (fromJson (include "redpanda.DefaultVolumes" (dict "a" (list $dot) ))) "r") )) )) )) ))) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

{{- define "redpanda.PostUpgradeJobScript" -}}
{{- $dot := (index .a 0) -}}
{{- range $_ := (list 1) -}}
{{- $values := $dot.Values.AsMap -}}
{{- $service := $values.listeners.admin -}}
{{- $cert := (index $values.tls.certs $service.tls.cert) -}}
{{- $script := "set -e\n" -}}
{{- range $key, $value := $values.config.cluster -}}
{{- if (eq $key "default_topic_replications") -}}
{{- $r := $values.statefulset.replicas -}}
{{- $r = (int (sub ((int (add $r ((int (mod $r 2)))))) 1)) -}}
{{- $value = (min (get (fromJson (include "_shims.typeassertion" (dict "a" (list "int" $value) ))) "r") $r) -}}
{{- end -}}
{{- $tmp_tuple_1 := (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.typetest" (dict "a" (list "float64" $value (float64 0)) ))) "r")) ))) "r") -}}
{{- $ok_2 := $tmp_tuple_1.T2 -}}
{{- $asFloat_1 := $tmp_tuple_1.T1 -}}
{{- if $ok_2 -}}
{{- $value = (int64 $asFloat_1) -}}
{{- end -}}
{{- $script = (printf "%srpk cluster config set %s %v\n" $script $key $value) -}}
{{- end -}}
{{- $tmp_tuple_2 := (get (fromJson (include "_shims.compact" (dict "a" (list (get (fromJson (include "_shims.dicttest" (dict "a" (list $values.config.cluster "storage_min_free_bytes" (coalesce nil)) ))) "r")) ))) "r") -}}
{{- $ok_3 := $tmp_tuple_2.T2 -}}
{{- if (not $ok_3) -}}
{{- $script = (printf "%srpk cluster config set storage_min_free_bytes %d\n" $script (int64 (get (fromJson (include "redpanda.StorageMinFreeBytes" (dict "a" (list $dot) ))) "r"))) -}}
{{- end -}}
{{- if (get (fromJson (include "redpanda.RedpandaAtLeast_23_2_1" (dict "a" (list $dot) ))) "r") -}}
{{- $caCert := "" -}}
{{- if $cert.caEnabled -}}
{{- $caCert = (printf "--cacert /etc/tls/certs/%s/ca.crt" $service.tls.cert) -}}
{{- end -}}
{{- $scheme := "http" -}}
{{- if (and (and $values.tls.enabled $service.tls.enabled) (ne $service.tls.cert "")) -}}
{{- $scheme = "https" -}}
{{- end -}}
{{- $url := (printf "%s://%s:%d/v1/debug/restart_service?service=schema-registry" $scheme (get (fromJson (include "redpanda.InternalDomain" (dict "a" (list $dot) ))) "r") (int64 $service.port)) -}}
{{- $script = (printf `%s
  if [ -d "/etc/secrets/users/" ]; then
  IFS=":" read -r USER_NAME PASSWORD MECHANISM < <(grep "" $(find /etc/secrets/users/* -print))
  curl -svm3 --fail --retry "120" --retry-max-time "120" --retry-all-errors --ssl-reqd \
  -X PUT -u ${USER_NAME}:${PASSWORD} \
  %s \
  %s || true
fi
` $script $caCert $url) -}}
{{- end -}}
{{- (dict "r" $script) | toJson -}}
{{- break -}}
{{- end -}}
{{- end -}}

